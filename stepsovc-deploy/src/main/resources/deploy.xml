<?xml version="1.0" encoding="UTF-8"?>
<project name="stepsovc-delivery-config" default="setup.box">
    <typedef file="ant/config-macros.xml"/>
    <typedef file="org/motechproject/build/deployMacroDefs.xml"/>

    <property file="${basedir}/properties/${env}/deploy.properties"/>

    <target name="deploy.stepsovc.from.hudson">
        <stop.tomcat
                tomcat.home="${tomcat.home}"
                tomcat.port="${tomcat.port}"/>

        <download.app.from.remote
                app.name="${app.name}"
                remote.location="http://${hudson.server}:${hudson.port}/job/${hudson.job.name}/${hudson.build.number}/org.wv.${app.name}$$${app.name}-web/artifact/org.wv.${app.name}/${app.name}-web/${hudson.release.version}/${app.name}.war"
                download.dir="${download.dir}"/>

        <copy.app.war.to.tomcat
                tomcat.home="${tomcat.home}"
                app.name="${app.name}"
                download.dir="${download.dir}"/>

        <start.tomcat
                tomcat.home="${tomcat.home}"
                tomcat.port="${tomcat.port}"/>

        <copy.over.properties/>


        <set.hudson.version
                tomcat.home="${tomcat.home}"
                app.name="${app.name}"
                hudson.release.version="${hudson.release.version}"
                hudson.build.number="${hudson.build.number}"/>

        <restart.tomcat
                tomcat.home="${tomcat.home}"
                tomcat.port="${tomcat.port}"/>
    </target>

    <target name="recreatedb.and.deploy.stepsovc.from.hudson" depends="load.quartz.schema,load.aggregator.schema">
        <antcall target="deploy.stepsovc.from.hudson"></antcall>
    </target>


    <target name="deploy.stepsovc.from.nexus">
        <property file="${basedir}/properties/${env}/deploy.properties"/>
        <stop.tomcat
                tomcat.home="${tomcat.home}"
                tomcat.port="${tomcat.port}"/>

        <download.app.from.remote
                app.name="${app.name}"
                remote.location="http://${nexus.server}:${nexus.port}/content/repositories/${nexus.repo}/org/wv/stepsovc/stepsovc-web/${nexus.version}/stepsovc-web-${nexus.version}.war"
                download.dir="${download.dir}"/>

        <copy.app.war.to.tomcat
                tomcat.home="${tomcat.home}"
                app.name="${app.name}"
                download.dir="${download.dir}"/>

        <start.tomcat
                tomcat.home="${tomcat.home}"
                tomcat.port="${tomcat.port}"/>

        <copy.over.properties/>

        <set.nexus.version
                tomcat.home="${tomcat.home}"
                app.name="${app.name}"
                nexus.server="${nexus.server}"
                nexus.release.version="${nexus.release.version}"/>

        <restart.tomcat
                tomcat.home="${tomcat.home}"
                tomcat.port="${tomcat.port}"/>

    </target>


    <target name="recreatedb.and.deploy.stepsovc.from.nexus" depends="load.quartz.schema,load.aggregator.schema">
        <antcall target="deploy.stepsovc.from.nexus"></antcall>
    </target>


    <target name="deploy.stepsovc.from.local">
        <property file="${basedir}/properties/${env}/deploy.properties"/>
        <stop.tomcat
                tomcat.home="${tomcat.home}"
                tomcat.port="${tomcat.port}"/>

        <copy.app.war.to.tomcat
                tomcat.home="${tomcat.home}"
                app.name="${app.name}"
                download.dir="${local.war.dir}"/>

        <start.tomcat
                tomcat.home="${tomcat.home}"
                tomcat.port="${tomcat.port}"/>

        <copy.over.properties/>

        <restart.tomcat
                tomcat.home="${tomcat.home}"
                tomcat.port="${tomcat.port}"/>

    </target>


    <target name="recreatedb.and.deploy.stepsovc.from.local" depends="load.quartz.schema,load.aggregator.schema">
        <antcall target="deploy.stepsovc.from.local"></antcall>
    </target>

    <target name="load.quartz.schema">
        <path id="dependencies">
            <fileset file="./lib/postgresql-9.1-901.jdbc4.jar"/>
        </path>

        <sql driver="${postgres.driver}"
             url="jdbc:postgresql://${postgres.server}:${postgres.port}/${postgres.db}"
             userid="${postgres.user}"
             classpathref="dependencies"
             password="${postgres.password}"
             autocommit="true"
                >
            drop database if exists ${postgres.quartz.db};
            create database ${postgres.quartz.db};
        </sql>
        <sql driver="${postgres.driver}"
             url="jdbc:postgresql://${postgres.server}:${postgres.port}/${postgres.quartz.db}"
             userid="${postgres.user}"
             classpathref="dependencies"
             password="${postgres.password}"
             src="./sql/quartz.sql"
             autocommit="true"
                >

        </sql>

        <echo message="recreated schema for ${postgres.quartz.db}"/>
    </target>

    <target name="load.aggregator.schema">
        <path id="dependencies">
            <fileset file="./lib/postgresql-9.1-901.jdbc4.jar"/>
        </path>

        <sql driver="${postgres.driver}"
             url="jdbc:postgresql://${postgres.server}:${postgres.port}/${postgres.db}"
             userid="${postgres.user}"
             classpathref="dependencies"
             password="${postgres.password}"
             autocommit="true"
                >
            drop database if exists ${postgres.aggregator.db};
            create database ${postgres.aggregator.db};
        </sql>
        <sql driver="${postgres.driver}"
             url="jdbc:postgresql://${postgres.server}:${postgres.port}/${postgres.aggregator.db}"
             userid="${postgres.user}"
             classpathref="dependencies"
             password="${postgres.password}"
             src="./sql/aggregator.sql"
             autocommit="true">

        </sql>

        <echo message="recreated schema for ${postgres.aggregator.db}"/>
    </target>

    <target name="deploy-nagios-scripts">
        <property file="${basedir}/properties/${env}/deploy.properties"/>
        <copy overwrite="true" todir="${nagios.home}/libexec">
            <fileset dir="${basedir}/nagios/plugins" />
        </copy>
        <copy overwrite="true" todir="${nagios.home}/etc/objects">
            <fileset dir="${basedir}/nagios/objects"/>
        </copy>
    </target>

    <target name="redeploy-all-properties">
        <property file="${basedir}/properties/${env}/deploy.properties"/>
       <copy.over.properties/>
    </target>


    <macrodef name="copy.over.properties">
        <sequential>
            <copy overwrite="true" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/classes"
                  file="${basedir}/properties/${env}/couchdb.properties"/>
            <copy overwrite="true" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/classes"
                  file="${basedir}/properties/${env}/activemq.properties"/>
            <copy overwrite="true" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/classes"
                  file="${basedir}/properties/${env}/stepsovc.properties"/>
            <copy overwrite="true" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/classes"
                  file="${basedir}/properties/${env}/osgi.properties"/>
            <copy overwrite="true" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/classes"
                  file="${basedir}/properties/${env}/aggregator.properties"/>
            <copy overwrite="true" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/classes"
                  file="${basedir}/properties/${env}/postgresql.properties"/>
            <copy overwrite="true" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/classes"
                  file="${basedir}/properties/${env}/quartz.properties"/>
            <copy overwrite="true" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/classes"
                  file="${basedir}/properties/${env}/sms.properties"/>
            <copy overwrite="true" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/classes"
                  file="${basedir}/properties/${env}/sms-http-template.json"/>
            <copy overwrite="true" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/classes"
                  file="${basedir}/properties/${env}/sms-http.properties"/>

        </sequential>
    </macrodef>

</project>
